// 
//  ListUsersPresenter.swift
//  Messenger
//
//  Created by Canh Tran Wizeline on 3/10/20.
//  Copyright © 2020 CanhTran. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation

final class ListUsersPresenter {
    // MARK: - Private Properties

    private unowned let view: ListUsersViewInterface
    private let interactor: ListUsersInteractorInterface
    private let router: ListUsersRouterInterface

    private var listUsers: [User] = [] {
        didSet {
            view.reloadData()
        }
    }
    
    private var lastUserId: Int = 0
    
    private var isLoading = false {
        didSet {
            view.setLoadingVisible(isLoading)
        }
    }
    
    // MARK: - LifeCycle

    init(view: ListUsersViewInterface,
         interactor: ListUsersInteractorInterface,
         router: ListUsersRouterInterface) {
        self.view = view
        self.interactor = interactor
        self.router = router
    }

    func viewDidLoad() {
        fetchListUsers()
    }
}

// MARK: - ListUsersPresenterInterface

extension ListUsersPresenter: ListUsersPresenterInterface {
    func numberOfUsers() -> Int {
        return listUsers.count
    }
    
    func userAtIndex(index: Int) -> User? {
        return listUsers[safe: index]
    }
    
    func refreshListUsers() {
        listUsers.removeAll()
        isLoading = false
        lastUserId = 0
        fetchListUsers()
    }
    
    func fetchListUsers() {
        guard !isLoading else { return }
        
        // Incase there is no more data since last Id
        if lastUserId == 0 && !listUsers.isEmpty {
            return
        }
        
        isLoading = true
        interactor.fetchListUsers(lastId: lastUserId) { [weak self] (result) in
            guard let self = self else { return }
            switch result {
            case .success(let users):
                self.lastUserId = users.last?.id ?? 0
                self.listUsers.append(contentsOf: users)
                
            case .failure(let error):
                self.router.showAlert(message: error.localizedDescription)
            }
            self.isLoading = false
        }
    }
    
    func openDirectMessageAt(index: Int) {
        if let user = listUsers[safe: index] {
            router.openDirectMessage(with: user)
        }
    }
}
