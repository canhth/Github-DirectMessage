// 
//  DirectMessagesInteractor.swift
//  Messenger
//
//  Created by Canh Tran Wizeline on 3/10/20.
//  Copyright ¬© 2020 CanhTran. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import Foundation

final class DirectMessagesInteractor {
    // MARK: - Private Properties
    private let networkClient: NetworkRequestable
    private let messagesDataStore: MessagesDataStore

    // MARK: - LifeCycle

    init(networkClient: NetworkRequestable = NetworkClient(),
         messagesDataStore: MessagesDataStore = MessagesDataStore()) {
        self.networkClient = networkClient
        self.messagesDataStore = messagesDataStore
    }
}

// MARK: - DirectMessagesInteractorInterface

extension DirectMessagesInteractor: DirectMessagesInteractorInterface {
    func fetchListMessages(with userId: Int,
                           completion: @escaping (Result<[Message], NetworkError>) -> Void) {
        if let results = messagesDataStore.getMessages(userId: String(userId)) {
            completion(.success(results.sorted(by: { $0.createdAt.timeIntervalSince1970 < $1.createdAt.timeIntervalSince1970 })))
        } else {
            completion(.failure(.invalidResponse))
        }
    }
    
    func createNewMessage(_ message: Message,
                          user: User,
                          completion: @escaping (Result<Message, NetworkError>) -> Void) {
        DispatchQueue.main.asyncAfter(deadline: .now() + 1) {
            let repeateText = message.text + " " + message.text
            let repeatMessage = Message(createdAt: Date(),
                                        avatarURL: user.avatarUrl,
                                        userName: user.login,
                                        text: repeateText)
            completion(.success(repeatMessage))
        }
    }
    
    func storeMessages(messages: [Message], userId: Int) {
        var arrayMessage = messages
        
        // Limit to store maximum 50 records only
        while arrayMessage.count > 50 {
            arrayMessage.removeFirst()
        }
        messagesDataStore.saveMessages(arrayMessage, userId: String(userId))
    }
}
