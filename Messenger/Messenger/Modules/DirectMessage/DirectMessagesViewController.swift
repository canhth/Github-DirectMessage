// 
//  DirectMessagesViewController.swift
//  Messenger
//
//  Created by Canh Tran Wizeline on 3/10/20.
//  Copyright © 2020 CanhTran. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

final class DirectMessagesViewController: BaseViewController {

    private enum DesignConstraints {
        static let commentInputHeight: CGFloat = 78
    }
    
    // MARK: - Public Properties

    var presenter: DirectMessagesPresenterInterface!

    private var keyboardHelper: KeyboardHelper?
    
    private lazy var tableView: UITableView = {
        let tableView = UITableView(frame: .zero)
        tableView.register(ReceiverMessageCell.self)
        tableView.register(SenderMessageCell.self)
        tableView.rowHeight = UITableView.automaticDimension
        tableView.backgroundColor = .white
        tableView.estimatedRowHeight = 50
        tableView.separatorStyle = .none
        tableView.allowsSelection = false
        tableView.dataSource = self
        return tableView
    }()
    
    private lazy var bottomInputView: MessageInputView = {
        let view = MessageInputView()
        view.backgroundColor = .clear
        view.sendMessageButtonDidTapped = { [unowned self] text in
            self.handleSendCommentAction(text: text)
        }
        return view
    }()
    
    private let titleNavigationBar: UILabel = {
        let label = UILabel()
        label.font = UIFont.boldSystemFont(ofSize: 18)
        label.textColor = Color.black
        return label
    }()
    
    // MARK: - LifeCycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        presenter.viewDidLoad()
    }
    
    override func willTransition(to newCollection: UITraitCollection, with coordinator: UIViewControllerTransitionCoordinator) {
        super.willTransition(to: newCollection, with: coordinator)
        tableView.reloadData()
        bottomInputView.layoutSubviews()
        view.endEditing(true)
    }
    
    // MARK: - Setup

    private func setupView() {
        view.backgroundColor = .white
        titleNavigationBar.text = presenter.getUserName()
        navigationItem.titleView = titleNavigationBar
        
        view.addSubview(bottomInputView)
        bottomInputView.anchor(left: view.safeAreaLayoutGuide.leftAnchor,
                               right: view.safeAreaLayoutGuide.rightAnchor)
        
        view.addSubview(tableView)
        tableView.anchor(top: view.layoutMarginsGuide.topAnchor,
                         left: view.safeAreaLayoutGuide.leftAnchor,
                         bottom: bottomInputView.topAnchor,
                         right: view.safeAreaLayoutGuide.rightAnchor)
        
        // Use to move input view to top's keyboard or bottom view
        let inputViewBottomConstraint = bottomInputView.bottomAnchor
            .constraint(equalTo: view.layoutMarginsGuide.bottomAnchor)
            .set(active: true)

        keyboardHelper = KeyboardHelper { [unowned self] animation, keyboardFrame, duration in
            switch animation {
            case .keyboardWillShow:
                inputViewBottomConstraint.constant = -keyboardFrame.height + self.view.safeAreaInsets.bottom
            case .keyboardWillHide:
                inputViewBottomConstraint.constant = 0
            }
            UIView.animate(withDuration: duration, animations: {
                self.view.layoutIfNeeded()
            }, completion: { (_) in
                self.scrollToBottom(animated: true)
            })
        }

        let tapGesture = UITapGestureRecognizer(target: self, action: #selector(onMainViewTouched(_:)))
        tapGesture.cancelsTouchesInView = false
        tapGesture.delegate = self
        view.addGestureRecognizer(tapGesture)
    }
    
    // MARK: - Actions

    @objc
    private func onMainViewTouched(_ sender: UITapGestureRecognizer?) {
        view.endEditing(true)
    }
    
    private func handleSendCommentAction(text: String) {
        presenter.createNewMessage(with: text)
    }
    
    private func scrollToBottom(animated: Bool) {
        guard presenter.numberOfMessages() > 0 else { return }
        DispatchQueue.main.async {
            let indexPath = IndexPath(row: self.presenter.numberOfMessages() - 1, section: 0)
            self.tableView.scrollToRow(at: indexPath, at: .bottom, animated: animated)
        }
    }
}

// MARK: - DirectMessagesViewInterface

extension DirectMessagesViewController: DirectMessagesViewInterface {
    func reloadData() {
        tableView.reloadData()
        scrollToBottom(animated: false)
    }
}

// MARK: - UITableViewDataSource

extension DirectMessagesViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return presenter.numberOfMessages()
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let message = presenter.messageAtIndex(index: indexPath.row) else {
            return UITableViewCell()
        }
        
        switch message.type {
        case .sender:
            let cell: SenderMessageCell = tableView.dequeueReusableCell(for: indexPath)
            cell.configCell(with: message)
            return cell
        case .receiver:
            let cell: ReceiverMessageCell = tableView.dequeueReusableCell(for: indexPath)
            cell.configCell(with: message)
            return cell
        }
    }
}

extension DirectMessagesViewController: UIGestureRecognizerDelegate {
    // Should ignore tap gesture when touching UIButton.
    func gestureRecognizer(_ gestureRecognizer: UIGestureRecognizer, shouldReceive touch: UITouch) -> Bool {
        return !(touch.view?.isKind(of: UIButton.self) == true)
    }
}
